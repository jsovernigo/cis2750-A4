*************************************************
Julian Sovernigo            0948924
gsoverni@mail.uoguelph.ca
CIS2750_W17                 A4: SQL and Messages
3/31/2017
*************************************************

******************
Pledge of Honesty
******************
    By handing in this assignment with this README file, I
assert that I have sole access and control over my submission,
and that this submission contains entirely my own work. I
affirm that I have not colaborated in the creation of this code,
nor have I taken any segment of code that I do not have express
ownership or permission to use.

************
Compilation
************

1- cd to the root folder of the program
2- type 'make' in the root folder.
3- to remove resources generated by compilation, please type 'make clean'

********************
Running the program
********************

1- cd to the root folder of the program
2- 3 programs, post, addauthor, and view.py exist, as well as db.

************
Limitations
************

	With the manipulation of the forward/backward arrows on a browser,
the passing of items between two pages can be desynchronized, and broken.
If you want to transition pages, change using the back button provided on
the page only, unless none is provided, in which case, the back arrow is 
safe to use.

	Also please note that he change author, and the add/remove author page
is available through the same button in the top left hand corner. This was
done to preserve the propogation of values between pages.

	It is also possible to manipulate the user into being able to post in
a stream that they do not belong to.  This can be done by:
	- logging in as a user 'A'
	- selecting stream '1'
	- logging in another tab as user 'B'
	- selecting stream '1'
	- posting as 'B' to '1'
	- entering the post screen as user 'A' for '1'
	- removing user 'A' from stream '1', using 'B''s tab
	- posting as 'A' in the now locked stream.
	This sequence can be used to break the way the post-read cycle operates,
allowing the desynchronization and eventual damage to the database (causes
permenant seg-faults as user 'A', since the user still has a registered last-
read field in his info section.
